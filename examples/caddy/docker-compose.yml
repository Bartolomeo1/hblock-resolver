version: "3.7"

services:

  hblock-resolver:
    image: "docker.io/hectormolinero/hblock-resolver:latest"
    restart: "on-failure:3"
    networks:
      - "hblock-resolver"
    dns:
      - "1.1.1.1"
      - "1.0.0.1"
    ports:
      - "127.0.0.153:53:53/udp"
      - "127.0.0.153:53:53/tcp"
      - "127.0.0.153:853:853/tcp"
    volumes:
      - "hblock-resolver-data:/var/lib/knot-resolver/"
      - "caddy-data:/var/lib/caddy/:ro"
    entrypoint: "/bin/sh"
    command: |
      -eu -c "
        if [ '${TLS}' = on ]; then
          export KRESD_CERT_MANAGED='false'
          export KRESD_CERT_CRT_FILE='/var/lib/caddy/acme/${TLS_CASERVER}/sites/${TLS_DOMAIN}/${TLS_DOMAIN}.crt'
          export KRESD_CERT_KEY_FILE='/var/lib/caddy/acme/${TLS_CASERVER}/sites/${TLS_DOMAIN}/${TLS_DOMAIN}.key'
          until [ -f "$${KRESD_CERT_CRT_FILE:?}" ]; do printf '%s\n' 'Waiting for Caddy...'; sleep 3; done
        fi
        exec tini container-foreground-cmd"
    depends_on:
      - "caddy"

  caddy:
    image: "docker.io/hectormolinero/caddy:latest"
    restart: on-failure:3
    networks:
      - "hblock-resolver"
    dns:
      - "1.1.1.1"
      - "1.0.0.1"
    ports:
      - "127.0.0.153:443:443/tcp"
    volumes:
      - "./Caddyfile:/etc/caddy/Caddyfile:ro"
      - "caddy-data:/var/lib/caddy/"
    environment:
      TLS: "${TLS}"
      TLS_DOMAIN: "${TLS_DOMAIN}"
      TLS_EMAIL: "${TLS_EMAIL}"
      TLS_CASERVER: "${TLS_CASERVER}"
      TLS_DNSPROVIDER: "${TLS_DNSPROVIDER}"
      CLOUDFLARE_EMAIL: "${CLOUDFLARE_EMAIL}"
      CLOUDFLARE_API_KEY: "${CLOUDFLARE_API_KEY}"

networks:

  hblock-resolver:

volumes:

  hblock-resolver-data:
  caddy-data:
